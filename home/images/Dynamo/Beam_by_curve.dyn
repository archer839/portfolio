{
  "Uuid": "08d91f6b-9bf0-4dbb-b73e-b8b98be34830",
  "IsCustomNode": false,
  "Description": null,
  "Name": "Beam_by_curve",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Nodes.DSFaceSelection, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "InstanceId": [
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003e671:253:SURFACE"
      ],
      "Id": "2badbc0decad418d8140f848086852e6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ac85a894fa034cc2b737e6de9cad33fc",
          "Name": "Surface",
          "Description": "Eléments sélectionnés.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled"
    },
    {
      "ConcreteType": "Dynamo.Nodes.DSModelElementsSelection, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "InstanceId": [
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f5b1",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f645",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f66f",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f68a",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f68b",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6a1",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6a2",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6a3",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6a4",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6b2",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6b3",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6b4",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6b5",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6b6",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6b7",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6b8",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6b9",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6c2",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6c3",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6c4",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6c5",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6c6",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6c7",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6c8",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6c9",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6e7",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6e8",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6e9",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6ea",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6eb",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6ec",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6ed",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6ee",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6ef",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6f0",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6f1",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6f2",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6f3",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6f4",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6f5",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6f6",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6f7",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6f8",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6f9",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6fa",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6fb",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6fc",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6fd",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f6fe",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f705",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f706",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f707",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f708",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f709",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f70a",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f70b",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f70c",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f70d",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f70e",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f70f",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f710",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f711",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f712",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f713",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f714",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f715",
        "89a5013e-eaa4-4cdd-a0cb-713df61731a2-0003f716"
      ],
      "Id": "d0116f30513e42c88fbde6566a91372a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "407cfd755df04e4bb34056090b485e3c",
          "Name": "Elements",
          "Description": "Eléments sélectionnés.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Grid.Curve",
      "Id": "b60485c67c9c410f863f129a1691b99c",
      "Inputs": [
        {
          "Id": "b67b6131a63442419f11ba0c9c0a0a15",
          "Name": "grid",
          "Description": "Revit.Elements.Grid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bd14b897246e4dfb8bdda91901e9ac7d",
          "Name": "Curve",
          "Description": "Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtenir la géométrie de Curve sous-jacente de cet élément\n\nGrid.Curve: Curve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.ProjectInputOnto@Autodesk.DesignScript.Geometry.Geometry,Autodesk.DesignScript.Geometry.Vector",
      "Id": "e99ca288a1d94a2aae7da7c2e9cb7db2",
      "Inputs": [
        {
          "Id": "ccafcb2513fc4f169453b712008049e9",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "566dd984b3e347b5ae6ad779c05f2153",
          "Name": "geometryToProject",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c73ac1d518404f9a95e162eb6ca2ebee",
          "Name": "projectionDirection",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "45d735f48e0b44db926041aa8762f2c7",
          "Name": "Geometry[]",
          "Description": "Geometry[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Projette la Geometry d'entrée sur cette surface dans la direction du vecteur d'entrée\n\nSurface.ProjectInputOnto (geometryToProject: Geometry, projectionDirection: Vector): Geometry[]"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Levels, DSRevitNodesUI",
      "SelectedIndex": 1,
      "SelectedString": "Niveau 1",
      "NodeType": "ExtensionNode",
      "Id": "1df32d61052f4b7e99f0ad4b85da5d74",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "fa8d66d421e747a1a7f6d23aaced3da7",
          "Name": "Levels",
          "Description": "Levels sélectionné",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Sélectionner un niveau dans le document actif"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.ZAxis",
      "Id": "ef9eefbe85d04d6ba905d90646e1c4f1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f4ee7d0d68314e388296fc8793972a8f",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtenir le vecteur d'axe Z canonique (0,0,1)\n\nVector.ZAxis ( ): Vector"
    },
    {
      "ConcreteType": "DSRevitNodesUI.StructuralFramingTypes, DSRevitNodesUI",
      "SelectedIndex": 1,
      "SelectedString": "HEA160",
      "NodeType": "ExtensionNode",
      "Id": "b6faeed406b04871824352b2c9d3586f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c06f515488bc4c9497b6122c9153f7a4",
          "Name": "Framing Types",
          "Description": "Framing Types sélectionné",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Sélectionner un type d'ossature dans le document actif"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.StructuralFraming.BeamByCurve@Autodesk.DesignScript.Geometry.Curve,Revit.Elements.Level,Revit.Elements.FamilyType",
      "Id": "56c4cb299d8b49e38ad67a1744273430",
      "Inputs": [
        {
          "Id": "de8302aa63974d79aa69c162338848b9",
          "Name": "curve",
          "Description": "Courbe qui définit l'axe de la poutre.\n\nCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e55faeb41aa34e6298da78c98e849e94",
          "Name": "level",
          "Description": "Niveau auquel vous souhaitez associer la poutre.\n\nLevel",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a1f162016b9f482291c03332563515ef",
          "Name": "structuralFramingType",
          "Description": "Type d'ossature représentant la poutre.\n\nFamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "00151114e34f4e688417c07c84e0ab8f",
          "Name": "StructuralFraming",
          "Description": "StructuralFraming",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Créer une poutre.\n\nStructuralFraming.BeamByCurve (curve: Curve, level: Level, structuralFramingType: FamilyType): StructuralFraming"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "f339c58fd78e453a878db3b65bd2cb48",
      "Inputs": [
        {
          "Id": "f2f6d68dba7a4845840ba7b74a0f65d4",
          "Name": "item0",
          "Description": "Index de l'élément 0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ffd6c5c0b8894d27b98a56a3c5f93bf9",
          "Name": "list",
          "Description": "Liste",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Permet de créer une liste des entrées indiquées"
    }
  ],
  "Connectors": [
    {
      "Start": "ac85a894fa034cc2b737e6de9cad33fc",
      "End": "ccafcb2513fc4f169453b712008049e9",
      "Id": "5d5868529e8e438d9d8956f1184571b9"
    },
    {
      "Start": "407cfd755df04e4bb34056090b485e3c",
      "End": "b67b6131a63442419f11ba0c9c0a0a15",
      "Id": "8e87e95777da46859306b5ec22313690"
    },
    {
      "Start": "bd14b897246e4dfb8bdda91901e9ac7d",
      "End": "f2f6d68dba7a4845840ba7b74a0f65d4",
      "Id": "e3f3a024094b44f197576231c0fb4dd2"
    },
    {
      "Start": "45d735f48e0b44db926041aa8762f2c7",
      "End": "de8302aa63974d79aa69c162338848b9",
      "Id": "144dd83d7177458db8592e7cb090dcb7"
    },
    {
      "Start": "fa8d66d421e747a1a7f6d23aaced3da7",
      "End": "e55faeb41aa34e6298da78c98e849e94",
      "Id": "268e7472a00d43c997b07e1406201eac"
    },
    {
      "Start": "f4ee7d0d68314e388296fc8793972a8f",
      "End": "c73ac1d518404f9a95e162eb6ca2ebee",
      "Id": "b7efcbaeaa5047e6b0525bb02d945d09"
    },
    {
      "Start": "c06f515488bc4c9497b6122c9153f7a4",
      "End": "a1f162016b9f482291c03332563515ef",
      "Id": "2c2713cfb9bd44bc9b4eaee7fdafba4e"
    },
    {
      "Start": "ffd6c5c0b8894d27b98a56a3c5f93bf9",
      "End": "566dd984b3e347b5ae6ad779c05f2153",
      "Id": "03b8e04205f44469be400fe0353c170c"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Bindings": [
    {
      "NodeId": "56c4cb29-9d8b-49e3-8ad6-7a1744273430",
      "Binding": {
        "BeamByCurve_InClassDecl-1_InFunctionScope-1_Instance0_56c4cb29-9d8b-49e3-8ad6-7a1744273430": ""
      }
    }
  ],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.3.0.5885",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Aperçu en arrière-plan",
      "EyeX": -8.1183711123560069,
      "EyeY": 1.7993336559932993,
      "EyeZ": -6.8877700400553792,
      "LookX": 3.9542390097482079,
      "LookY": 1.6883066314109334,
      "LookZ": 0.013069264678123638,
      "UpX": -0.5806997839754886,
      "UpY": 0.814115518356325,
      "UpZ": -0.0019192869112345957
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Select Face",
        "Id": "2badbc0decad418d8140f848086852e6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3.2755200878269193,
        "Y": 119.00915034997143
      },
      {
        "ShowGeometry": true,
        "Name": "Select Model Elements",
        "Id": "d0116f30513e42c88fbde6566a91372a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -86.7166865489358,
        "Y": 284.05042834062181
      },
      {
        "ShowGeometry": true,
        "Name": "Grid.Curve",
        "Id": "b60485c67c9c410f863f129a1691b99c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 249.216404305598,
        "Y": 419.184852622976
      },
      {
        "ShowGeometry": true,
        "Name": "Surface.ProjectInputOnto",
        "Id": "e99ca288a1d94a2aae7da7c2e9cb7db2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 503.17116518823946,
        "Y": 124.74895438473567
      },
      {
        "ShowGeometry": true,
        "Name": "Levels",
        "Id": "1df32d61052f4b7e99f0ad4b85da5d74",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 845.53314024632687,
        "Y": 194.99768849598368
      },
      {
        "ShowGeometry": true,
        "Name": "Vector.ZAxis",
        "Id": "ef9eefbe85d04d6ba905d90646e1c4f1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 537.21566981986143,
        "Y": 469.29838105828134
      },
      {
        "ShowGeometry": true,
        "Name": "Structural Framing Types",
        "Id": "b6faeed406b04871824352b2c9d3586f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 794.89786706643986,
        "Y": 314.27023427338207
      },
      {
        "ShowGeometry": true,
        "Name": "StructuralFraming.BeamByCurve",
        "Id": "56c4cb299d8b49e38ad67a1744273430",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1088.543308818781,
        "Y": 127.79593660020004
      },
      {
        "ShowGeometry": true,
        "Name": "List Create",
        "Id": "f339c58fd78e453a878db3b65bd2cb48",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 308.293805621059,
        "Y": 232.287912665946
      }
    ],
    "Annotations": [],
    "X": 205.04108549116307,
    "Y": 99.717440377570085,
    "Zoom": 0.7785758786013488
  }
}